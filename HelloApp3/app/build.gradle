plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.callor.hello"
        minSdk 26
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    // ID 핸들링하는 방식을 DataBinDing 으로 변경하기
    buildFeatures {
        viewBinding true
    }

}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    /**
     * lifecycle
     * Android 개발을 할때 구글이 제안하는 프로젝트 아키텍쳐 중의 하나
     * 초기에는 개발을 할때 아키텍쳐와 관련하여 구글이 거의 관여하지 않았다
     * Android 가 발전하면서 스마트 디바이스에 최적회된 어플등을 만들때
     * 개발자들에게 권장하는 아키텍쳐들을 만들었다
     * 화면에 Data 를 view 할때 Model(데이터관여)와 View(UI)를 분리하여
     * 사용할수 있도록 만들어 놓은 아키텍쳐 이고
     *
     * Fragment, RecyclerView, Navigation 등과 연동하는 다중 화면의
     * 어플에서는 사용을 적극 권장하고 있다
     *
     * 이 아키텍쳐를 사용하기 위하여 dependency 를 추가해준다
     *
     */
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2:50'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}